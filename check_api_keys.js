// üîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô –í RAILWAY
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –≤ Railway...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredVars = {
  'SUPABASE_URL': process.env.SUPABASE_URL,
  'SUPABASE_ANON_KEY': process.env.SUPABASE_ANON_KEY,
  'SUPABASE_SERVICE_ROLE_KEY': process.env.SUPABASE_SERVICE_ROLE_KEY,
  'BOT_TOKEN': process.env.BOT_TOKEN,
  'ADMIN_CHAT_ID': process.env.ADMIN_CHAT_ID,
  'NODE_ENV': process.env.NODE_ENV,
  'RAILWAY_ENVIRONMENT': process.env.RAILWAY_ENVIRONMENT
};

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('=====================================');

let missingVars = [];
let validVars = [];

Object.entries(requiredVars).forEach(([key, value]) => {
  if (value) {
    console.log(`‚úÖ ${key}: ${key.includes('KEY') || key.includes('TOKEN') ? '***' + value.slice(-4) : value}`);
    validVars.push(key);
  } else {
    console.log(`‚ùå ${key}: –ù–ï –ù–ê–°–¢–†–û–ï–ù`);
    missingVars.push(key);
  }
});

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
console.log('========================');

if (missingVars.length === 0) {
  console.log('üéâ –í—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
} else {
  console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${missingVars.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:`);
  missingVars.forEach(varName => {
    console.log(`   - ${varName}`);
  });
  
  console.log('\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:');
  console.log('============================');
  
  if (missingVars.includes('SUPABASE_URL') || missingVars.includes('SUPABASE_ANON_KEY')) {
    console.log('1. Supabase API –∫–ª—é—á–∏:');
    console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
    console.log('   - Settings ‚Üí API');
    console.log('   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Project URL –∏ anon public key');
  }
  
  if (missingVars.includes('BOT_TOKEN')) {
    console.log('2. Telegram Bot Token:');
    console.log('   - –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram');
    console.log('   - /mybots ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ ‚Üí API Token');
  }
  
  console.log('\n3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway Dashboard:');
  console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤ Railway');
  console.log('   - Variables ‚Üí Add Variable');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π:');
console.log('============================');

if (process.env.SUPABASE_URL && !process.env.SUPABASE_URL.includes('supabase.co')) {
  console.log('‚ö†Ô∏è  SUPABASE_URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π URL Supabase');
}

if (process.env.SUPABASE_ANON_KEY && !process.env.SUPABASE_ANON_KEY.startsWith('eyJ')) {
  console.log('‚ö†Ô∏è  SUPABASE_ANON_KEY –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
}

if (process.env.BOT_TOKEN && !process.env.BOT_TOKEN.includes(':')) {
  console.log('‚ö†Ô∏è  BOT_TOKEN –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase (–µ—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å)
if (process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY) {
  console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  try {
    const { safeSupabaseConnection } = require('./supabase_upgrade_fix.js');
    
    safeSupabaseConnection().then(result => {
      if (result.success) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', result.error);
      }
    }).catch(error => {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error.message);
    });
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase');
  }
}

// –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:');
console.log('===================');
console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${validVars.length}/${Object.keys(requiredVars).length}`);
console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${missingVars.length}`);
console.log(`üåç Environment: ${process.env.RAILWAY_ENVIRONMENT || 'production'}`);
console.log(`üíª Node.js: ${process.version}`);

if (missingVars.length === 0) {
  console.log('\nüéØ –°—Ç–∞—Ç—É—Å: –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï');
  console.log('üöÄ –í—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
} else {
  console.log('\nüéØ –°—Ç–∞—Ç—É—Å: –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò');
  console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  requiredVars,
  missingVars,
  validVars,
  isValid: missingVars.length === 0
}; 