// üöÇ EXPRESS –°–ï–†–í–ï–† –° TELEGRAM –ë–û–¢–û–ú –î–õ–Ø RAILWAY
// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Å –±–æ—Ç–æ–º –∏ health check

const express = require('express');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
let testSupabaseConnection;
try {
  const supabaseModule = require('./supabase_config.js');
  testSupabaseConnection = supabaseModule.testSupabaseConnection;
} catch (error) {
  console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', error.message);
  testSupabaseConnection = async () => ({
    success: false,
    error: 'Supabase not configured',
    recommendations: ['Configure SUPABASE_URL and SUPABASE_ANON_KEY']
  });
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint –¥–ª—è Railway
app.get('/healthz', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    service: 'essential-oils-bot'
  });
});

// Health check endpoint (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.status(200).json({
    message: 'Essential Oils Bot API',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString(),
    endpoints: {
      health: '/health',
      healthz: '/healthz',
      supabase: '/api/supabase-test'
    }
  });
});

// Supabase test endpoint
app.get('/api/supabase-test', async (req, res) => {
  try {
    const result = await testSupabaseConnection();
    res.status(200).json({
      success: true,
      supabase: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err.message);
  res.status(500).json({
    error: 'Internal Server Error',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: 'Endpoint not found',
    timestamp: new Date().toISOString()
  });
});

// Start server
app.listen(PORT, '0.0.0.0', () => {
  console.log('üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:`);
  console.log(`   Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`);
  console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}`);
  console.log(`   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${process.arch}`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
  console.log(`   RAILWAY_ENVIRONMENT: ${process.env.RAILWAY_ENVIRONMENT || 'production'}`);
  console.log(`   –ü–æ—Ä—Ç: ${PORT}`);
  console.log(`   URL: http://0.0.0.0:${PORT}`);
  
  // Test Supabase connection
  testSupabaseConnection().then(result => {
    if (result.success) {
      console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Supabase:', result.error);
    }
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  console.log('üîß –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Railway.');
} else {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    const botApp = require('./src/index.js');
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
  }
} 