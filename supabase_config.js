// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE –° –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï–ú –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô
// –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ Node.js –≤–µ—Ä—Å–∏–∏

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π Node.js
process.env.SUPPRESS_NO_CONFIG_WARNING = 'y';
process.env.SUPPRESS_DEPRECATION_WARNINGS = 'y';

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ Node.js –≤–µ—Ä—Å–∏–∏
const originalWarn = console.warn;
console.warn = function(...args) {
  const message = args.join(' ');
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ Node.js –≤–µ—Ä—Å–∏–∏
  if (message.includes('Node.js 18 and below are deprecated') || 
      message.includes('upgrade to Node.js 20 or later')) {
    console.log('üîß –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ Node.js –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ');
    return;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  originalWarn.apply(console, args);
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const { createClient } = require('@supabase/supabase-js');

const supabaseConfig = {
  supabaseUrl: process.env.SUPABASE_URL,
  supabaseKey: process.env.SUPABASE_ANON_KEY,
  options: {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'supabase-js/2.x',
        'X-Node-Version': process.version,
        'X-Railway-Environment': process.env.RAILWAY_ENVIRONMENT || 'production'
      }
    }
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
const supabase = createClient(
  supabaseConfig.supabaseUrl,
  supabaseConfig.supabaseKey,
  supabaseConfig.options
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testSupabaseConnection() {
  try {
    console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    console.log(`üìä Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`);
    console.log(`üîó Supabase URL: ${supabaseConfig.supabaseUrl ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
    
    if (!supabaseConfig.supabaseUrl || !supabaseConfig.supabaseKey) {
      return {
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase',
        recommendations: [
          '–î–æ–±–∞–≤—å—Ç–µ SUPABASE_URL –≤ Railway Dashboard',
          '–î–æ–±–∞–≤—å—Ç–µ SUPABASE_ANON_KEY –≤ Railway Dashboard'
        ]
      };
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase.from('subscribers').select('count').limit(1);
    
    if (error) {
      return {
        success: false,
        error: error.message,
        recommendations: [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π',
          '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ Supabase'
        ]
      };
    }
    
    return {
      success: true,
      message: 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      nodeVersion: process.version,
      supabaseVersion: '2.39.0'
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message,
      recommendations: [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω'
      ]
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
function getSupabaseClient() {
  return supabase;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getSupabaseConfig() {
  return supabaseConfig;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  supabase,
  testSupabaseConnection,
  getSupabaseClient,
  getSupabaseConfig,
  supabaseConfig
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –≤ development)
if (process.env.NODE_ENV === 'development') {
  testSupabaseConnection().then(result => {
    if (result.success) {
      console.log('‚úÖ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase:', result.error);
    }
  });
} 