const OilDatabase = require('../../modules/oil-database');
const { createClient } = require('@supabase/supabase-js');

class OilService {
  constructor() {
    this.oilDatabase = new OilDatabase();
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );
  }

  async searchOil(oilName) {
    try {
      const normalizedName = this.normalizeOilName(oilName);
      
      const { data, error } = await this.supabase
        .from('oils')
        .select('*')
        .ilike('oil_name', `%${normalizedName}%`)
        .limit(1);

      if (error) {
        console.error('Supabase error:', error);
        return null;
      }

      if (data && data.length > 0) {
        return data[0];
      }

      return null;
    } catch (error) {
      console.error('Error searching oil:', error);
      return null;
    }
  }

  async getAllOils() {
    try {
      const { data, error } = await this.supabase
        .from('oils')
        .select('*');

      if (error) {
        console.error('Supabase error:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('Error getting all oils:', error);
      return [];
    }
  }

  normalizeOilName(name) {
    return name.toLowerCase().trim();
  }

  formatOilInfo(oil) {
    if (!oil) return '–ú–∞—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';

    return `üåø **${oil.oil_name}**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
${oil.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üíö **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:**
${oil.emotional_effect || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üí™ **–§–∏–∑–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç:**
${oil.physical_effect || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üîß **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
${oil.applications || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

‚ö†Ô∏è **–ú–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏:**
${oil.safety_warning || '–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º'}

üòÑ **${oil.joke || '–£–ª—ã–±–Ω–∏—Ç–µ—Å—å! –≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞ - —ç—Ç–æ –ø—Ä–∏—Ä–æ–¥–Ω–∞—è –∞–ø—Ç–µ–∫–∞!'}**`;
  }

  getSuggestions(query) {
    const suggestions = [
      '–ª–∞–≤–∞–Ω–¥–∞', '–º—è—Ç–∞', '–ª–∏–º–æ–Ω', '—ç–≤–∫–∞–ª–∏–ø—Ç', '—Ä–æ–º–∞—à–∫–∞',
      '—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '–±–µ—Ä–≥–∞–º–æ—Ç', '–∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥'
    ];

    return suggestions.filter(s => 
      s.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 5);
  }

  formatNotFoundMessage(oilName, suggestions) {
    let message = `‚ùå **–ú–∞—Å–ª–æ "${oilName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**

üí° **–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:**
`;

    suggestions.forEach(suggestion => {
      message += `‚Ä¢ ${suggestion}\n`;
    });

    message += `
üîç **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ —Ç–æ—á–Ω–µ–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å "–ø–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏`;

    return message;
  }
}

module.exports = OilService; 