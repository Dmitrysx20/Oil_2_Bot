const { createClient } = require('@supabase/supabase-js');

class SubscriptionService {
  constructor() {
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );
  }

  async handleInquiry(chatId, user, request) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
      const { data: existingSubscription } = await this.supabase
        .from('subscriptions')
        .select('*')
        .eq('chat_id', chatId)
        .single();

      if (existingSubscription) {
        return {
          message: `üì± **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!**

‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${existingSubscription.notification_time || '09:00'}
üìÖ –°—Ç–∞—Ç—É—Å: ${existingSubscription.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

üí° **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:**
‚Ä¢ "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è" - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è" - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`,
          keyboard: {
            inline_keyboard: [
              [
                { text: 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' },
                { text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: 'change_time' }
              ],
              [
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'statistics' },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
              ]
            ]
          }
        };
      } else {
        return {
          message: `üì± **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞—Ä–æ–º–∞-—Å–æ–≤–µ—Ç—ã**

–ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º!

‚ú® **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –æ –º–∞—Å–ª–∞—Ö
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** 09:00 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?`,
          keyboard: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe_confirm' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }
              ]
            ]
          }
        };
      }
    } catch (error) {
      console.error('Error handling subscription inquiry:', error);
      return {
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    }
  }

  async handleCallback(chatId, user, data) {
    try {
      switch (data) {
        case 'subscribe_confirm':
          return await this.subscribeUser(chatId, user);
        
        case 'unsubscribe':
          return await this.unsubscribeUser(chatId);
        
        case 'change_time':
          return await this.showTimeOptions(chatId);
        
        case 'statistics':
          return await this.showStatistics(chatId);
        
        default:
          return {
            message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
            keyboard: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          };
      }
    } catch (error) {
      console.error('Error handling subscription callback:', error);
      return {
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    }
  }

  async subscribeUser(chatId, user) {
    try {
      const { error } = await this.supabase
        .from('subscriptions')
        .insert({
          chat_id: chatId,
          user_id: user.id,
          username: user.username || user.first_name,
          is_active: true,
          notification_time: '09:00',
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('Error subscribing user:', error);
        return {
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          keyboard: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
      }

      return {
        message: `‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!**

üåø –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Ä–æ–º–∞-—Å–æ–≤–µ—Ç—ã –≤ 09:00.

üí° **–ü–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ **–ª–∞–≤–∞–Ω–¥—É** –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ **–º—è—Ç—É** –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ —É—Ç—Ä–æ–º!

üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    } catch (error) {
      console.error('Error subscribing user:', error);
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    }
  }

  async unsubscribeUser(chatId) {
    try {
      const { error } = await this.supabase
        .from('subscriptions')
        .update({ is_active: false })
        .eq('chat_id', chatId);

      if (error) {
        console.error('Error unsubscribing user:', error);
        return {
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          keyboard: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
      }

      return {
        message: `üîï **–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞**

–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

üí° –ú–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    } catch (error) {
      console.error('Error unsubscribing user:', error);
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    }
  }

  async showTimeOptions(chatId) {
    const timeOptions = [
      '07:00', '08:00', '09:00', '10:00', '12:00',
      '15:00', '18:00', '20:00', '21:00'
    ];

    const keyboard = {
      inline_keyboard: []
    };

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for (let i = 0; i < timeOptions.length; i += 3) {
      const row = timeOptions.slice(i, i + 3).map(time => ({
        text: time,
        callback_data: `set_time:${time}`
      }));
      keyboard.inline_keyboard.push(row);
    }

    keyboard.inline_keyboard.push([
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    return {
      message: `‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Ä–æ–º–∞-—Å–æ–≤–µ—Ç—ã?`,
      keyboard: keyboard
    };
  }

  async showStatistics(chatId) {
    try {
      const { data: subscription } = await this.supabase
        .from('subscriptions')
        .select('*')
        .eq('chat_id', chatId)
        .single();

      if (!subscription) {
        return {
          message: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          keyboard: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
      }

      const daysSubscribed = Math.floor(
        (new Date() - new Date(subscription.created_at)) / (1000 * 60 * 60 * 24)
      );

      return {
        message: `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã: ${daysSubscribed} –¥–Ω–µ–π
‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${subscription.notification_time}
üì± –°—Ç–∞—Ç—É—Å: ${subscription.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—é –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    } catch (error) {
      console.error('Error showing statistics:', error);
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
    }
  }
}

module.exports = SubscriptionService; 