// üîó –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('=====================================');
console.log(`SUPABASE_URL: ${supabaseUrl ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
console.log(`SUPABASE_ANON_KEY: ${supabaseKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);

if (!supabaseUrl || !supabaseKey) {
  console.log('\n‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
  console.log('üîß –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway Dashboard');
  console.log('2. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env');
  console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Railway CLI: railway variables');
  process.exit(1);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
async function testSupabaseConnection() {
  try {
    console.log('\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    const { createClient } = require('@supabase/supabase-js');
    
    const supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: true,
        persistSession: false
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data, error } = await supabase
      .from('oils')
      .select('oil_name')
      .limit(1);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:');
      console.log('   –û—à–∏–±–∫–∞:', error.message);
      console.log('   –ö–æ–¥:', error.code);
      console.log('   –î–µ—Ç–∞–ª–∏:', error.details);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data ? data.length : 0}`);
    
    if (data && data.length > 0) {
      console.log('üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', data[0]);
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
    console.log('   –û—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSupabaseConnection().then(success => {
  if (success) {
    console.log('\nüéâ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
  } else {
    console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase');
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –∫–ª—é—á–∞');
    console.log('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ Supabase');
  }
});
