// üöÇ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ RAILWAY –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è

const https = require('https');
const http = require('http');

console.log('üöÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
console.log('=====================================');

// –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Railway URL
const appUrl = process.env.RAILWAY_PUBLIC_DOMAIN || 'your-app.railway.app';

console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: ${appUrl}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP/HTTPS
function testUrl(url) {
  return new Promise((resolve) => {
    const protocol = url.startsWith('https') ? https : http;
    
    const req = protocol.get(url, (res) => {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      console.log(`üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(res.headers, null, 2)}`);
      
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${data.substring(0, 200)}...`);
        resolve({
          success: true,
          statusCode: res.statusCode,
          data: data
        });
      });
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
      resolve({
        success: false,
        error: error.message
      });
    });
    
    req.setTimeout(10000, () => {
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)');
      req.destroy();
      resolve({
        success: false,
        error: 'Timeout'
      });
    });
  });
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function testRailwayApp() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  console.log(`RAILWAY_PUBLIC_DOMAIN: ${process.env.RAILWAY_PUBLIC_DOMAIN || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  console.log(`PORT: ${process.env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
  const testUrls = [
    `https://${appUrl}`,
    `http://${appUrl}`,
    `https://${appUrl}:${process.env.PORT || 3000}`,
    `http://${appUrl}:${process.env.PORT || 3000}`
  ];
  
  for (const url of testUrls) {
    console.log(`\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
    const result = await testUrl(url);
    
    if (result.success) {
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç!');
      break;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${result.error}`);
    }
  }
  
  console.log('\n=====================================');
  console.log('üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRailwayApp().catch(error => {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
}); 