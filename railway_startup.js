// üöÇ RAILWAY STARTUP SCRIPT
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Railway —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π Supabase

const { checkNodeVersion, diagnoseSupabaseIssues, safeSupabaseConnection } = require('./supabase_upgrade_fix.js');

console.log('üöÇ Railway startup initiated...');
console.log(`Environment: ${process.env.RAILWAY_ENVIRONMENT || 'production'}`);
console.log(`Node version: ${process.version}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js
console.log('üîç Checking Node.js version...');
const nodeVersionOk = checkNodeVersion();

if (!nodeVersionOk) {
  console.error('‚ùå Node.js version incompatible with Railway');
  process.exit(1);
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase
console.log('üîç Running Supabase diagnosis...');
const diagnosis = diagnoseSupabaseIssues();

if (diagnosis.hasErrors) {
  console.error('‚ùå Critical Supabase issues found:');
  diagnosis.issues.forEach(issue => {
    if (issue.severity === 'error') {
      console.error(`- ${issue.message}`);
    }
  });
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
console.log('üîó Testing Supabase connection...');
safeSupabaseConnection().then(result => {
  if (result.success) {
    console.log('‚úÖ Railway startup completed successfully');
    console.log('üöÄ Bot is ready to run on Railway');
    console.log('üìä System status: HEALTHY');
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—Å–∫–∞
    console.log('üìà Startup metrics:', {
      nodeVersion: process.version,
      environment: process.env.RAILWAY_ENVIRONMENT || 'production',
      supabaseStatus: 'connected',
      timestamp: new Date().toISOString()
    });
  } else {
    console.error('‚ùå Supabase connection failed:', result.error);
    console.error('Recommendations:');
    result.recommendations.forEach((rec, index) => {
      console.error(`${index + 1}. ${rec}`);
    });
    process.exit(1);
  }
}).catch(error => {
  console.error('‚ùå Railway startup failed:', error);
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  nodeVersionOk,
  diagnosis,
  startupTime: new Date().toISOString()
}; 